<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <div id="login-register">
            <button id="loginBtn">Login</button>
            <button id="registerBtn">Register</button>
        </div>
        <div id="task-list" style="display: none;">
            <h2>Your Tasks</h2>
            <ul id="task-items"></ul>
            <form id="add-task-form">
                <input type="text" id="new-task" placeholder="Add a new task...">
                <button type="submit">Add Task</button>
            </form>
        </div>
    </div>
    <script src="app.js"></script>
</body>
</html>

#file: styles.css

body {
    font-family: Arial, sans-serif;
}

.container {
    max-width: 800px;
    margin: auto;
    padding: 20px;
}

#task-list ul {
    list-style: none;
    padding: 0;
}

.hidden {
    display: none;
}

#file: app.js

const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const taskItems = document.getElementById('task-items');
const newTaskInput = document.getElementById('new-task');
const addTaskForm = document.getElementById('add-task-form');

loginBtn.addEventListener('click', () => {
    // Implementasi login logic
    alert('Login logic will be implemented here');
});

registerBtn.addEventListener('click', () => {
    // Implementasi pendaftaran logic
    alert('Pendaftaran logic will be implemented here');
});

addTaskForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const taskText = newTaskInput.value;
    if (taskText) {
        const li = document.createElement('li');
        li.textContent = taskText;
        taskItems.appendChild(li);
        newTaskInput.value = '';
    }
});

#Backend (Flask/Python atau Node.js)
#Pilihan 1: Flask (Python)
#file: app.py

from flask import Flask, render_template, request, redirect, url_for, session

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Simulated user database
users = {
    'user1': 'password1',
    'user2': 'password2'
}

tasks = []

@app.route('/')
def index():
    if 'username' in session:
        return render_template('index.html', username=session['username'], tasks=tasks)
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username] == password:
            session['username'] = username
            return redirect(url_for('index'))
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username not in users:
            users[username] = password
            return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/add_task', methods=['POST'])
def add_task():
    username = session.get('username')
    if username:
        tasks.append(request.form['task'])
        return redirect(url_for('index'))

@app.route('/delete_task/<task_id>', methods=['POST'])
def delete_task(task_id):
    tasks.remove(task_id)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)

#Pilihan 2: Node.js (Express)
#file: app.js

const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
    secret: 'your_secret_key',
    resave: false,
    saveUninitialized: true
}));

let users = {
    'user1': 'password1',
    'user2': 'password2'
};

let tasks = [];

app.get('/', (req, res) => {
    if (req.session.username) {
        res.render('index', { username: req.session.username, tasks });
    } else {
        res.redirect('/login');
    }
});

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    if (users[username] === password) {
        req.session.username = username;
        res.redirect('/');
    } else {
        res.send('Invalid credentials');
    }
});

app.post('/register', (req, res) => {
    const { username, password } = req.body;
    if (!users[username]) {
        users[username] = password;
        res.redirect('/login');
    } else {
        res.send('Username already exists');
    }
});

app.post('/add_task', (req, res) => {
    if (req.session.username) {
        const task = req.body.task;
        tasks.push(task);
        res.redirect('/');
    }
});

app.post('/delete_task/:id', (req, res) => {
    const taskIndex = tasks.indexOf(req.body.id);
    if (taskIndex > -1) {
        tasks.splice(taskIndex, 1);
        res.redirect('/');
    }
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

#Database (SQLite atau sederhana lainnya)
#Pilihan 1: SQLite (Python)
#file: db.py

import sqlite3

def init_db():
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            task TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def add_task(username, task):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tasks (username, task) VALUES (?, ?)', (username, task))
    conn.commit()
    conn.close()

def delete_task(task_id):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

def get_tasks(username):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT task FROM tasks WHERE username = ?', (username,))
    tasks = [row[0] for row in cursor.fetchall()]
    conn.close()
    return tasks

#Pilihan 2: Simple JSON File (Node.js)
#file: db.js

const fs = require('fs');

const tasksFilePath = 'tasks.json';

function loadTasks() {
    if (!fs.existsSync(tasksFilePath)) {
        return [];
    }
    const data = fs.readFileSync(tasksFilePath);
    return JSON.parse(data);
}

function saveTasks(tasks) {
    fs.writeFileSync(tasksFilePath, JSON.stringify(tasks, null, 2));
}

function addTask(username, task) {
    const tasks = loadTasks();
    const existingTaskIndex = tasks.findIndex(t => t.username === username);
    if (existingTaskIndex === -1) {
        tasks.push({ username, task });
    } else {
        tasks[existingTaskIndex].task += ` ${task}\n`;
    }
    saveTasks(tasks);
}

function deleteTask(taskId) {
    const tasks = loadTasks();
    tasks = tasks.filter(task => task.id !== taskId);
    saveTasks(tasks);
}

module.exports = { addTask, deleteTask, loadTasks };
